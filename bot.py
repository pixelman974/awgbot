import telebot
import sqlite3
import datetime
import json
import psutil
import platform
import time

TOKEN = ''
ADMIN_ID =

bot = telebot.TeleBot(TOKEN)

user_states = {}

def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY, 
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            register_at TEXT,
            key_text TEXT,
            key_expire_at TEXT,
            id_key TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()

def register_user(user):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    c.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, register_at, key_text, id_key)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (user.id, user.username, user.first_name, user.last_name, now, None, None))
    conn.commit()
    conn.close()

######################################################################################################################################################

COMMAND_LIMIT = 3
TIME_LIMIT = 20

user_commands = {}

def is_rate_limited(user_id, command):
    now = time.time()
    if user_id not in user_commands:
        user_commands[user_id] = {}

    user_data = user_commands[user_id].get(command)

    if user_data:
        count, first_time = user_data
        if now - first_time <= TIME_LIMIT:
            if count >= COMMAND_LIMIT:
                wait_time = int(TIME_LIMIT - (now - first_time))
                return True, wait_time
            else:
                user_commands[user_id][command] = [count + 1, first_time]
                return False, 0
        else:
            user_commands[user_id][command] = [1, now]
            return False, 0
    else:
        user_commands[user_id][command] = [1, now]
        return False, 0

@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.from_user.id
    limited, wait_time = is_rate_limited(user_id, 'start')
    if limited:
        bot.send_message(message.chat.id, f"üßê–ù–µ —Ç–∞–∫ —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥")
        return

    user = message.from_user
    register_user(user)
    bot.send_message(message.chat.id, "üëã–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å PixelVPN. \n"
                                      '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ú–µ–Ω—é"')

@bot.message_handler(commands=['broadcast'])
def broadcast_start(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "üê∂–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ö—É–¥–∞ –º—ã –ª–µ–∑–µ–º?")
        return
    user_states[message.from_user.id] = 'waiting_for_broadcast'
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–æ–∫—É–º–µ–Ω—Ç)")

@bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == 'waiting_for_broadcast',
                     content_types=['text', 'photo', 'document'])
def broadcast_send(message):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT user_id FROM users')
    users = c.fetchall()
    conn.close()

    for user in users:
        user_id = user[0]
        try:
            if message.photo:
                bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption)
            elif message.document:
                bot.send_document(user_id, message.document.file_id, caption=message.caption)
            else:
                bot.send_message(user_id, message.text)
        except Exception:
            pass

    bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    user_states.pop(message.from_user.id)

@bot.message_handler(commands=['key'])
def key_message(message):
    user_id = message.from_user.id
    limited, wait_time = is_rate_limited(user_id, 'key')
    if limited:
        bot.send_message(message.chat.id, f"üßê–ù–µ —Ç–∞–∫ —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥")
        return

    user_id = message.from_user.id
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT key_text, key_expire_at FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()

    if result and result[0]:
        key_text, key_expire_at = result
        expire_text = f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {key_expire_at}" if key_expire_at else ""
        bot.send_message(message.chat.id, f"üîë–í–∞—à –∫–ª—é—á:\n{key_text}\n{expire_text}")
    else:
        bot.send_message(message.chat.id, "‚ÅâÔ∏è–ö–ª—é—á –¥–ª—è –≤–∞—Å –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - @nikita_sevcity")

@bot.message_handler(commands=['addkey'])
def addkey_message(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "üê∂–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ö—É–¥–∞ –º—ã –ª–µ–∑–µ–º?")
        return

    try:
        parts = message.text.split(' ', 2)
        user_id = int(parts[1])
        key_text = parts[2]
    except (IndexError, ValueError):
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /addkey user_id —Ç–µ–∫—Å—Ç")
        return

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT key_text FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()

    if result:
        current_text = result[0] or ""
        updated_text = (current_text + "\n" + key_text).strip() if current_text else key_text

        # –î–æ–±–∞–≤–∏–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü
        expire_date = (datetime.datetime.now() + datetime.timedelta(days=30)).strftime("%Y-%m-%d %H:%M:%S")

        c.execute('UPDATE users SET key_text = ?, key_expire_at = ? WHERE user_id = ?', (updated_text, expire_date, user_id))
        conn.commit()
        bot.reply_to(message, f"–ö–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expire_date}")
    else:
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    conn.close()

@bot.message_handler(commands=['changekey'])
def changekey_message(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "üê∂–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ö—É–¥–∞ –º—ã –ª–µ–∑–µ–º?")
        return

    try:
        parts = message.text.split(' ', 2)
        user_id = int(parts[1])
        new_text = parts[2]
    except IndexError:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /changekey user_id –Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /changekey user_id none")
        return

    if new_text.lower() == 'none':
        new_text = None

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('UPDATE users SET key_text = ?, key_expire_at = NULL WHERE user_id = ?', (new_text, user_id))
    conn.commit()
    conn.close()

    bot.reply_to(message, f"–ö–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª—ë–Ω")

@bot.message_handler(commands=['idkey'])
def idkey_message(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "üê∂–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ö—É–¥–∞ –º—ã –ª–µ–∑–µ–º?")
        return
    try:
        parts = message.text.split(' ', 2)
        user_id = int(parts[1])
        id_key = parts[2]
    except (IndexError, ValueError):
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /idkey user_id –∫–ª—é—á")
        return

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT id_key FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    if result is not None:
        c.execute('UPDATE users SET id_key = ? WHERE user_id = ?', (id_key, user_id))
        conn.commit()
        bot.reply_to(message, f"ID-–∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    conn.close()

@bot.message_handler(commands=['changeidkey'])
def changeidkey_message(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "üê∂–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ö—É–¥–∞ –º—ã –ª–µ–∑–µ–º?")
        return
    try:
        parts = message.text.split(' ', 2)
        user_id = int(parts[1])
        new_id_key = parts[2]
    except (IndexError, ValueError):
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /changeidkey user_id –Ω–æ–≤—ã–π_–∫–ª—é—á")
        return

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT id_key FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    if result is not None:
        c.execute('UPDATE users SET id_key = ? WHERE user_id = ?', (new_id_key, user_id))
        conn.commit()
        bot.reply_to(message, f"ID-–∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω—ë–Ω")
    else:
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    conn.close()

@bot.message_handler(commands=['idkeys'])
def idkeys_message(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "üê∂–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ö—É–¥–∞ –º—ã –ª–µ–∑–µ–º?")
        return

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT user_id, username, first_name, last_name, id_key FROM users WHERE id_key IS NOT NULL AND id_key != ""')
    users = c.fetchall()
    conn.close()

    if not users:
        bot.reply_to(message, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ ID-–∫–ª—é—á–∞–º–∏")
        return

    text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å ID-–∫–ª—é—á–∞–º–∏:\n"
    for i, user in enumerate(users, 1):
        user_id, username, first_name, last_name, id_key = user
        username = f"@{username}" if username else "(–Ω–µ—Ç username)"
        name = f"{first_name or ''} {last_name or ''}".strip() or "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
        text += f"{i}. {user_id} - {username} ({name})\n   ID-–∫–ª—é—á: {id_key}\n"

    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['myprofile'])
def myprofile_message(message):
    user_id = message.from_user.id
    limited, wait_time = is_rate_limited(user_id, 'myprofile')
    if limited:
        bot.send_message(message.chat.id, f"üßê–ù–µ —Ç–∞–∫ —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥")
        return

    user_id = message.from_user.id
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT user_id, username, first_name, last_name, register_at FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()

    if not result:
        bot.reply_to(message, "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ üëâ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        return

    user_id, username, first_name, last_name, register_at = result
    username = f"@{username}" if username else "(–Ω–µ—Ç username)"
    name = f"{first_name or ''} {last_name or ''}".strip() or "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
    register_at = register_at or "(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)"

    text = (f"üë§–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üÜîID: {user_id}\n"
            f"üëÄUsername: {username}\n"
            f"ü´†–ò–º—è: {name}\n"
            f"üóì–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {register_at}")

    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['traffickey'])
def traffic_key(message):
    user_id = message.from_user.id
    limited, wait_time = is_rate_limited(user_id, 'traffickey')
    if limited:
        bot.send_message(message.chat.id, f"üßê–ù–µ —Ç–∞–∫ —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥")
        return
    try:
        user_id = message.from_user.id

        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id_key FROM users WHERE user_id=?", (user_id,))
        result = cursor.fetchone()
        conn.close()

        if not result:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ id_key. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –≤—ã–¥–∞—Ç—å –µ–≥–æ üó£")
            return

        id_key = result[0]

        with open('/var/lib/docker/overlay2/83568fb367d9eeced01ded09ef13c13c91dde24fe4e6ae15e7127056e67d0a5d/diff/opt/amnezia/awg/clientsTable', 'r') as f:
            data = json.load(f)

        client_data = None
        for client in data:
            if client['clientId'] == id_key:
                client_data = client
                break

        if client_data:
            user_info = client_data.get('userData', {})
            received = user_info.get('dataReceived', '0 MiB')
            sent = user_info.get('dataSent', '0 MiB')
            handshake = user_info.get('latestHandshake', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

            response = f"–î–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á—É:\n" \
                       f"–ü–æ–ª—É—á–µ–Ω–æ: {received}\n" \
                       f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n" \
                       f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {handshake}"
            bot.send_message(message.chat.id, response)
        else:
            bot.send_message(message.chat.id, "üòê–í–∞—à –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
    except Exception:
        bot.send_message(message.chat.id, f"üòê–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@bot.message_handler(commands=['userkeys'])
def userkeys_message(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "üê∂–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ö—É–¥–∞ –º—ã –ª–µ–∑–µ–º?")
        return

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT user_id, username, first_name, last_name FROM users WHERE key_text IS NOT NULL AND key_text != ""')
    users = c.fetchall()
    conn.close()

    if not users:
        bot.reply_to(message, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏")
        return

    text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏:\n"
    for i, user in enumerate(users, 1):
        user_id, username, first_name, last_name = user
        username = f"@{username}" if username else "(–Ω–µ—Ç username)"
        name = f"{first_name or ''} {last_name or ''}".strip() or "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
        text += f"{i}. {user_id} - {username} ({name})\n"

    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['users'])
def users_message(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "üê∂–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ö—É–¥–∞ –º—ã –ª–µ–∑–µ–º?")
        return

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT user_id, username, first_name, last_name, register_at FROM users')
    users = c.fetchall()
    conn.close()

    if not users:
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
        return

    text = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for i, user in enumerate(users, 1):
        user_id, username, first_name, last_name, register_at = user
        username = f"@{username}" if username else "(–Ω–µ—Ç username)"
        name = f"{first_name or ''} {last_name or ''}".strip()
        text += f"{i}. {user_id} - {username} ({name})\n   –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {register_at}\n"

    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['info'])
def info_message(message):
    user_id = message.from_user.id
    limited, wait_time = is_rate_limited(user_id, 'info')
    if limited:
        bot.send_message(message.chat.id, f"üßê–ù–µ —Ç–∞–∫ —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥")
        return

    bot.send_message(
        message.chat.id,
        '–õ–æ–∫–∞—Ü–∏—è PixelVPN - –§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ\n'
        '–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PixelVPN –Ω—É–∂–Ω–æ:\n'
        '1. –ù–∞–ø–∏—Å–∞—Ç—å - @nikita_sevcity, –¥–ª—è –æ–ø–ª–∞—Ç—ã (75‚ÇΩ/–º–µ—Å.) –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞\n'
        '2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AmneziaVPN:\n'
        'üçèiOS - <a href="https://apps.apple.com/ru/app/amnezia-vpn/id1533001837">–°–∫–∞—á–∞—Ç—å –∏–∑ App Store</a>\n'
        'üì±Android - <a href="https://play.google.com/store/apps/details?id=com.amnezia.amnezia">–°–∫–∞—á–∞—Ç—å –∏–∑ Google Play</a>\n'
        'ü™üWindows - <a href="https://github.com/amnezia-vpn/amnezia-client/releases/download/4.8.5.0/AmneziaVPN_4.8.5.0_x64.exe">–°–∫–∞—á–∞—Ç—å –∏–∑ GitHub</a>\n'
        'üíªMacOS - <a href="https://github.com/amnezia-vpn/amnezia-client/releases/download/4.8.5.0/AmneziaVPN_4.8.5.0_macos.dmg">–°–∫–∞—á–∞—Ç—å –∏–∑ GitHub</a>\n'
        'üêßLinux - <a href="https://github.com/amnezia-vpn/amnezia-client/releases/download/4.8.5.0/AmneziaVPN_4.8.5.0_linux.tar.zip">–°–∫–∞—á–∞—Ç—å –∏–∑ GitHub</a>\n'
        '<a href="https://github.com/amnezia-vpn/amnezia-client/releases/download/4.8.5.0/AmneziaVPN_4.8.5.0_linux.tar.zip">–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞ Linux</a>\n'
        '3. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–∞–Ω–¥–æ–π /key\n'
        '4. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–∏—Å—Ç—É–ø–∏–º", –≤ –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –æ–∫–Ω–µ –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á –≤ –ø–æ–ª–µ "–í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á"\n'
        '5. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"\n',
        parse_mode="HTML",
        disable_web_page_preview=True
    )


@bot.message_handler(commands=['help'])
def help_message(message):
    user_id = message.from_user.id
    limited, wait_time = is_rate_limited(user_id, 'info')
    if limited:
        bot.send_message(message.chat.id, f"üßê–ù–µ —Ç–∞–∫ —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥")
        return

    bot.send_message(message.chat.id, 'üÜò–û—Ç–ø—Ä–∞–≤—å - /start –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É - @nikita_sevcity')

@bot.message_handler(commands=['path'])
def path_message(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "üê∂–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ö—É–¥–∞ –º—ã –ª–µ–∑–µ–º?")
        return

    bot.send_message(message.chat.id, "/var/lib/docker/overlay2/83568fb367d9eeced01ded09ef13c13c91dde24fe4e6ae15e7127056e67d0a5d/diff/opt/amnezia/awg")

@bot.message_handler(commands=['c'])
def c_message(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "üê∂–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ö—É–¥–∞ –º—ã –ª–µ–∑–µ–º?")
        return

    bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:"
                                      "/users\n"
                                      "/path\n"
                                      "/status\n"
                                      "/broadcast\n"
                                      "/addkey\n"
                                      "/changekey\n"
                                      "/userkeys\n"
                                      "/idkey\n"
                                      "/changeidkey\n"
                                      "/idkeys\n")

@bot.message_handler(commands=['status'])
def htop_command(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "üê∂–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ö—É–¥–∞ –º—ã –ª–µ–∑–µ–º?")
        return
    try:
        cpu_percent = psutil.cpu_percent(interval=1)
        virtual_memory = psutil.virtual_memory()
        disk_usage = psutil.disk_usage('/')
        boot_time = datetime.datetime.fromtimestamp(psutil.boot_time())
        uptime = datetime.datetime.now() - boot_time

        text = f"""
<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞</b>:
<b>OS:</b> {platform.system()} {platform.release()}
<b>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:</b> {cpu_percent}% –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
<b>RAM:</b> {virtual_memory.used // (1024**2)}MB / {virtual_memory.total // (1024**2)}MB ({virtual_memory.percent}%)
<b>–î–∏—Å–∫ /:</b> {disk_usage.used // (1024**3)}GB / {disk_usage.total // (1024**3)}GB ({disk_usage.percent}%)
<b>Uptime:</b> {str(uptime).split('.')[0]}
"""
        bot.send_message(message.chat.id, text, parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda message: True)
def unknown_command(message):
    known_commands = ['start', 'key', 'addkey', 'changekey', 'myprofile', 'userkeys', 'users', 'info', 'help', 'path', 'broadcast', 'idkey', 'changeidkey', 'idkeys', 'status', 'c', 'traffickey']

    command = message.text.split()[0][1:]

    if command not in known_commands:
        bot.reply_to(message, "üôÇ‚Äç‚ÜîÔ∏è–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã")

bot.infinity_polling()
